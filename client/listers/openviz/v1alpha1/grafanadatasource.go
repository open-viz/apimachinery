/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.openviz.dev/grafana-tools/apis/openviz/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GrafanaDatasourceLister helps list GrafanaDatasources.
// All objects returned here must be treated as read-only.
type GrafanaDatasourceLister interface {
	// List lists all GrafanaDatasources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GrafanaDatasource, err error)
	// GrafanaDatasources returns an object that can list and get GrafanaDatasources.
	GrafanaDatasources(namespace string) GrafanaDatasourceNamespaceLister
	GrafanaDatasourceListerExpansion
}

// grafanaDatasourceLister implements the GrafanaDatasourceLister interface.
type grafanaDatasourceLister struct {
	indexer cache.Indexer
}

// NewGrafanaDatasourceLister returns a new GrafanaDatasourceLister.
func NewGrafanaDatasourceLister(indexer cache.Indexer) GrafanaDatasourceLister {
	return &grafanaDatasourceLister{indexer: indexer}
}

// List lists all GrafanaDatasources in the indexer.
func (s *grafanaDatasourceLister) List(selector labels.Selector) (ret []*v1alpha1.GrafanaDatasource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GrafanaDatasource))
	})
	return ret, err
}

// GrafanaDatasources returns an object that can list and get GrafanaDatasources.
func (s *grafanaDatasourceLister) GrafanaDatasources(namespace string) GrafanaDatasourceNamespaceLister {
	return grafanaDatasourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GrafanaDatasourceNamespaceLister helps list and get GrafanaDatasources.
// All objects returned here must be treated as read-only.
type GrafanaDatasourceNamespaceLister interface {
	// List lists all GrafanaDatasources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.GrafanaDatasource, err error)
	// Get retrieves the GrafanaDatasource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.GrafanaDatasource, error)
	GrafanaDatasourceNamespaceListerExpansion
}

// grafanaDatasourceNamespaceLister implements the GrafanaDatasourceNamespaceLister
// interface.
type grafanaDatasourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GrafanaDatasources in the indexer for a given namespace.
func (s grafanaDatasourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GrafanaDatasource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GrafanaDatasource))
	})
	return ret, err
}

// Get retrieves the GrafanaDatasource from the indexer for a given namespace and name.
func (s grafanaDatasourceNamespaceLister) Get(name string) (*v1alpha1.GrafanaDatasource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("grafanadatasource"), name)
	}
	return obj.(*v1alpha1.GrafanaDatasource), nil
}
