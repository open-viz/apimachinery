/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go.openviz.dev/grafana-tools/apis/openviz/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v11 "kmodules.xyz/client-go/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *DatasourceConfiguration) Reset()      { *m = DatasourceConfiguration{} }
func (*DatasourceConfiguration) ProtoMessage() {}
func (*DatasourceConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{0}
}
func (m *DatasourceConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatasourceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DatasourceConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasourceConfiguration.Merge(m, src)
}
func (m *DatasourceConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DatasourceConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasourceConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DatasourceConfiguration proto.InternalMessageInfo

func (m *GrafanaDashboard) Reset()      { *m = GrafanaDashboard{} }
func (*GrafanaDashboard) ProtoMessage() {}
func (*GrafanaDashboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{1}
}
func (m *GrafanaDashboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboard.Merge(m, src)
}
func (m *GrafanaDashboard) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboard) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboard.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboard proto.InternalMessageInfo

func (m *GrafanaDashboardList) Reset()      { *m = GrafanaDashboardList{} }
func (*GrafanaDashboardList) ProtoMessage() {}
func (*GrafanaDashboardList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{2}
}
func (m *GrafanaDashboardList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardList.Merge(m, src)
}
func (m *GrafanaDashboardList) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardList) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardList.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardList proto.InternalMessageInfo

func (m *GrafanaDashboardReference) Reset()      { *m = GrafanaDashboardReference{} }
func (*GrafanaDashboardReference) ProtoMessage() {}
func (*GrafanaDashboardReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{3}
}
func (m *GrafanaDashboardReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardReference.Merge(m, src)
}
func (m *GrafanaDashboardReference) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardReference) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardReference.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardReference proto.InternalMessageInfo

func (m *GrafanaDashboardSpec) Reset()      { *m = GrafanaDashboardSpec{} }
func (*GrafanaDashboardSpec) ProtoMessage() {}
func (*GrafanaDashboardSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{4}
}
func (m *GrafanaDashboardSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardSpec.Merge(m, src)
}
func (m *GrafanaDashboardSpec) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardSpec proto.InternalMessageInfo

func (m *GrafanaDashboardStatus) Reset()      { *m = GrafanaDashboardStatus{} }
func (*GrafanaDashboardStatus) ProtoMessage() {}
func (*GrafanaDashboardStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{5}
}
func (m *GrafanaDashboardStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardStatus.Merge(m, src)
}
func (m *GrafanaDashboardStatus) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardStatus proto.InternalMessageInfo

func (m *GrafanaDashboardTemplate) Reset()      { *m = GrafanaDashboardTemplate{} }
func (*GrafanaDashboardTemplate) ProtoMessage() {}
func (*GrafanaDashboardTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{6}
}
func (m *GrafanaDashboardTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardTemplate.Merge(m, src)
}
func (m *GrafanaDashboardTemplate) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardTemplate proto.InternalMessageInfo

func (m *GrafanaDashboardTemplateList) Reset()      { *m = GrafanaDashboardTemplateList{} }
func (*GrafanaDashboardTemplateList) ProtoMessage() {}
func (*GrafanaDashboardTemplateList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{7}
}
func (m *GrafanaDashboardTemplateList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardTemplateList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardTemplateList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardTemplateList.Merge(m, src)
}
func (m *GrafanaDashboardTemplateList) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardTemplateList) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardTemplateList.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardTemplateList proto.InternalMessageInfo

func (m *GrafanaDashboardTemplateReference) Reset()      { *m = GrafanaDashboardTemplateReference{} }
func (*GrafanaDashboardTemplateReference) ProtoMessage() {}
func (*GrafanaDashboardTemplateReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{8}
}
func (m *GrafanaDashboardTemplateReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardTemplateReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardTemplateReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardTemplateReference.Merge(m, src)
}
func (m *GrafanaDashboardTemplateReference) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardTemplateReference) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardTemplateReference.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardTemplateReference proto.InternalMessageInfo

func (m *GrafanaDashboardTemplateSpec) Reset()      { *m = GrafanaDashboardTemplateSpec{} }
func (*GrafanaDashboardTemplateSpec) ProtoMessage() {}
func (*GrafanaDashboardTemplateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{9}
}
func (m *GrafanaDashboardTemplateSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDashboardTemplateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDashboardTemplateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDashboardTemplateSpec.Merge(m, src)
}
func (m *GrafanaDashboardTemplateSpec) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDashboardTemplateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDashboardTemplateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDashboardTemplateSpec proto.InternalMessageInfo

func (m *GrafanaDatasource) Reset()      { *m = GrafanaDatasource{} }
func (*GrafanaDatasource) ProtoMessage() {}
func (*GrafanaDatasource) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{10}
}
func (m *GrafanaDatasource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDatasource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDatasource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDatasource.Merge(m, src)
}
func (m *GrafanaDatasource) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDatasource) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDatasource.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDatasource proto.InternalMessageInfo

func (m *GrafanaDatasourceList) Reset()      { *m = GrafanaDatasourceList{} }
func (*GrafanaDatasourceList) ProtoMessage() {}
func (*GrafanaDatasourceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{11}
}
func (m *GrafanaDatasourceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDatasourceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDatasourceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDatasourceList.Merge(m, src)
}
func (m *GrafanaDatasourceList) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDatasourceList) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDatasourceList.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDatasourceList proto.InternalMessageInfo

func (m *GrafanaDatasourceSpec) Reset()      { *m = GrafanaDatasourceSpec{} }
func (*GrafanaDatasourceSpec) ProtoMessage() {}
func (*GrafanaDatasourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{12}
}
func (m *GrafanaDatasourceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDatasourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDatasourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDatasourceSpec.Merge(m, src)
}
func (m *GrafanaDatasourceSpec) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDatasourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDatasourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDatasourceSpec proto.InternalMessageInfo

func (m *GrafanaDatasourceStatus) Reset()      { *m = GrafanaDatasourceStatus{} }
func (*GrafanaDatasourceStatus) ProtoMessage() {}
func (*GrafanaDatasourceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{13}
}
func (m *GrafanaDatasourceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrafanaDatasourceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GrafanaDatasourceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrafanaDatasourceStatus.Merge(m, src)
}
func (m *GrafanaDatasourceStatus) XXX_Size() int {
	return m.Size()
}
func (m *GrafanaDatasourceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GrafanaDatasourceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GrafanaDatasourceStatus proto.InternalMessageInfo

func (m *ModelTemplateConfiguration) Reset()      { *m = ModelTemplateConfiguration{} }
func (*ModelTemplateConfiguration) ProtoMessage() {}
func (*ModelTemplateConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{14}
}
func (m *ModelTemplateConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModelTemplateConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModelTemplateConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModelTemplateConfiguration.Merge(m, src)
}
func (m *ModelTemplateConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ModelTemplateConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ModelTemplateConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ModelTemplateConfiguration proto.InternalMessageInfo

func (m *TargetRef) Reset()      { *m = TargetRef{} }
func (*TargetRef) ProtoMessage() {}
func (*TargetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_6da6927a53116833, []int{15}
}
func (m *TargetRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TargetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetRef.Merge(m, src)
}
func (m *TargetRef) XXX_Size() int {
	return m.Size()
}
func (m *TargetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetRef.DiscardUnknown(m)
}

var xxx_messageInfo_TargetRef proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DatasourceConfiguration)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.DatasourceConfiguration")
	proto.RegisterType((*GrafanaDashboard)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboard")
	proto.RegisterType((*GrafanaDashboardList)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardList")
	proto.RegisterType((*GrafanaDashboardReference)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardReference")
	proto.RegisterType((*GrafanaDashboardSpec)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardSpec")
	proto.RegisterType((*GrafanaDashboardStatus)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardStatus")
	proto.RegisterType((*GrafanaDashboardTemplate)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardTemplate")
	proto.RegisterType((*GrafanaDashboardTemplateList)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardTemplateList")
	proto.RegisterType((*GrafanaDashboardTemplateReference)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardTemplateReference")
	proto.RegisterType((*GrafanaDashboardTemplateSpec)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDashboardTemplateSpec")
	proto.RegisterType((*GrafanaDatasource)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDatasource")
	proto.RegisterType((*GrafanaDatasourceList)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDatasourceList")
	proto.RegisterType((*GrafanaDatasourceSpec)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDatasourceSpec")
	proto.RegisterType((*GrafanaDatasourceStatus)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.GrafanaDatasourceStatus")
	proto.RegisterType((*ModelTemplateConfiguration)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.ModelTemplateConfiguration")
	proto.RegisterType((*TargetRef)(nil), "go.openviz.dev.grafana_tools.apis.openviz.v1alpha1.TargetRef")
}

func init() {
	proto.RegisterFile("go.openviz.dev/grafana-tools/apis/openviz/v1alpha1/generated.proto", fileDescriptor_6da6927a53116833)
}

var fileDescriptor_6da6927a53116833 = []byte{
	// 1518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0xdb, 0xc6,
	0x12, 0x37, 0x45, 0xc9, 0x96, 0x56, 0x71, 0x12, 0x6f, 0x5e, 0x12, 0xc6, 0x2f, 0x91, 0xfc, 0x14,
	0xe4, 0xc1, 0x05, 0x62, 0xaa, 0x71, 0x8b, 0xa2, 0x45, 0xd1, 0x43, 0x18, 0xb9, 0xae, 0xf2, 0xcf,
	0xc6, 0xc6, 0xc9, 0xa1, 0x08, 0x90, 0xae, 0xc4, 0x15, 0xc5, 0x58, 0x22, 0x59, 0x2e, 0xa9, 0xc4,
	0x2e, 0x5a, 0xf4, 0x23, 0xf4, 0xd2, 0x53, 0x3f, 0x42, 0x0f, 0x3d, 0xe4, 0x4b, 0xe4, 0x98, 0x02,
	0x05, 0x9a, 0x93, 0x5a, 0xab, 0xc7, 0x1e, 0xda, 0x73, 0x4e, 0xc5, 0x2e, 0x97, 0x4b, 0xd1, 0x32,
	0xe3, 0x26, 0x51, 0x7c, 0x33, 0xe7, 0xcf, 0x6f, 0x66, 0x67, 0x76, 0x7f, 0x33, 0x16, 0x30, 0x2c,
	0x57, 0x77, 0x3d, 0xe2, 0x0c, 0xec, 0x5d, 0xdd, 0x24, 0x83, 0xba, 0xe5, 0xe3, 0x0e, 0x76, 0xf0,
	0x4a, 0xe0, 0xba, 0x3d, 0x5a, 0xc7, 0x9e, 0x4d, 0xeb, 0x42, 0x5d, 0x1f, 0x5c, 0xc1, 0x3d, 0xaf,
	0x8b, 0xaf, 0xd4, 0x2d, 0xe2, 0x10, 0x1f, 0x07, 0xc4, 0xd4, 0x3d, 0xdf, 0x0d, 0x5c, 0xb8, 0x9a,
	0xc6, 0xd0, 0x05, 0xc6, 0x03, 0x8e, 0xa1, 0x33, 0x0c, 0xa9, 0x8e, 0x31, 0x16, 0x57, 0x2c, 0x3b,
	0xe8, 0x86, 0x2d, 0xbd, 0xed, 0xf6, 0xeb, 0x96, 0x6b, 0xb9, 0x75, 0x0e, 0xd5, 0x0a, 0x3b, 0xfc,
	0x8b, 0x7f, 0xf0, 0xbf, 0xa2, 0x10, 0x8b, 0xef, 0x6f, 0x7f, 0x48, 0x75, 0xdb, 0x65, 0x09, 0xf5,
	0x71, 0xbb, 0x6b, 0x3b, 0xc4, 0xdf, 0xa9, 0x7b, 0xdb, 0x56, 0x94, 0x61, 0x9f, 0x04, 0xb8, 0x3e,
	0x98, 0x48, 0x6c, 0xb1, 0x9e, 0xe5, 0xe5, 0x87, 0x4e, 0x60, 0xf7, 0xc9, 0x84, 0xc3, 0x07, 0x87,
	0x39, 0xd0, 0x76, 0x97, 0xf4, 0xf1, 0x84, 0xdf, 0xca, 0x76, 0xdf, 0x35, 0xc3, 0x1e, 0xa1, 0xfa,
	0xe3, 0x9d, 0xdd, 0x7a, 0xbb, 0x67, 0x13, 0x27, 0x58, 0xb1, 0x38, 0xce, 0x01, 0x79, 0xd5, 0xbe,
	0x02, 0x67, 0x1b, 0x38, 0xc0, 0xd4, 0x0d, 0xfd, 0x36, 0xb9, 0xe6, 0x3a, 0x1d, 0xdb, 0x0a, 0x7d,
	0x1c, 0xd8, 0xae, 0x03, 0x57, 0x01, 0x30, 0xa5, 0x4a, 0x53, 0x96, 0x94, 0xe5, 0x92, 0x01, 0x9f,
	0x0e, 0xab, 0x33, 0xa3, 0x61, 0x15, 0x24, 0x4e, 0x68, 0xcc, 0x0a, 0x5e, 0x06, 0xc5, 0x8e, 0xdb,
	0x33, 0x89, 0xdf, 0x6c, 0x68, 0xb9, 0x25, 0x65, 0x59, 0x35, 0x4e, 0x0a, 0x8f, 0xe2, 0xa7, 0x42,
	0x8e, 0xa4, 0x45, 0xed, 0x97, 0x1c, 0x38, 0xb9, 0x1e, 0x75, 0xa8, 0x81, 0x69, 0xb7, 0xe5, 0x62,
	0xdf, 0x84, 0x5f, 0x80, 0x22, 0x2b, 0x22, 0x03, 0xe5, 0x41, 0xcb, 0xab, 0xef, 0xea, 0x51, 0x2d,
	0xf4, 0xf1, 0x5a, 0xe8, 0xde, 0xb6, 0x15, 0x35, 0x94, 0x59, 0xeb, 0x83, 0x2b, 0xfa, 0x46, 0xeb,
	0x21, 0x69, 0x07, 0xb7, 0x48, 0x80, 0x93, 0x34, 0x13, 0x19, 0x92, 0xa8, 0xf0, 0x21, 0xc8, 0x53,
	0x8f, 0xb4, 0x79, 0x82, 0xe5, 0xd5, 0xcf, 0xf4, 0x57, 0xbf, 0x33, 0xfa, 0xfe, 0xac, 0xef, 0x78,
	0xa4, 0x6d, 0x1c, 0x13, 0x51, 0xf3, 0xec, 0x0b, 0xf1, 0x18, 0xd0, 0x07, 0xb3, 0x34, 0xc0, 0x41,
	0x48, 0x35, 0x95, 0x47, 0xbb, 0x3e, 0x95, 0x68, 0x1c, 0xd1, 0x38, 0x2e, 0xe2, 0xcd, 0x46, 0xdf,
	0x48, 0x44, 0xaa, 0xfd, 0xa6, 0x80, 0xff, 0xec, 0x77, 0xb9, 0x69, 0xd3, 0x00, 0xde, 0x9f, 0x28,
	0xad, 0xfe, 0xef, 0x4a, 0xcb, 0xbc, 0x79, 0x61, 0x65, 0x37, 0x63, 0xc9, 0x58, 0x59, 0x6d, 0x50,
	0xb0, 0x03, 0xd2, 0xa7, 0x5a, 0x6e, 0x49, 0x5d, 0x2e, 0xaf, 0x36, 0xa6, 0x71, 0x52, 0x63, 0x5e,
	0x04, 0x2c, 0x34, 0x19, 0x34, 0x8a, 0x22, 0xd4, 0x7e, 0x56, 0xc0, 0xb9, 0xfd, 0xa6, 0x88, 0x74,
	0x88, 0x4f, 0x9c, 0x36, 0x81, 0x67, 0x40, 0xce, 0x36, 0xf9, 0x01, 0x55, 0x63, 0x76, 0x34, 0xac,
	0xe6, 0x9a, 0x0d, 0x94, 0xb3, 0x4d, 0x78, 0x0e, 0xa8, 0xa1, 0x6d, 0xf2, 0xb6, 0x97, 0x8c, 0xb9,
	0xd1, 0xb0, 0xaa, 0xde, 0x6d, 0x36, 0x10, 0x93, 0xc1, 0x2a, 0x28, 0xb8, 0xbe, 0xd5, 0x6c, 0xf0,
	0x2e, 0xa9, 0x46, 0x89, 0x45, 0xdc, 0x60, 0x02, 0x14, 0xc9, 0x61, 0x05, 0x14, 0x02, 0x3b, 0xe8,
	0x11, 0x2d, 0xcf, 0xbd, 0x8b, 0xbc, 0xcd, 0xbd, 0xd0, 0x42, 0x91, 0x98, 0x63, 0xfb, 0x3d, 0xad,
	0x30, 0x86, 0x8d, 0x6e, 0x22, 0x26, 0x83, 0x97, 0xc0, 0xdc, 0x80, 0xf8, 0xd4, 0x76, 0x1d, 0x6d,
	0x96, 0xa3, 0x97, 0x47, 0xc3, 0xea, 0xdc, 0xbd, 0x48, 0x84, 0x62, 0x5d, 0xed, 0x47, 0x75, 0xb2,
	0x6b, 0xec, 0x22, 0x41, 0x13, 0xcc, 0x89, 0xd2, 0x89, 0xa6, 0x7d, 0xf2, 0x3a, 0x95, 0xdd, 0xc2,
	0xbe, 0x45, 0x02, 0x44, 0x3a, 0x51, 0x78, 0x11, 0x09, 0xc5, 0xd0, 0xf0, 0x36, 0x28, 0xf4, 0x5d,
	0x93, 0xf4, 0xc4, 0xab, 0x58, 0xc9, 0xbc, 0x18, 0x82, 0x7f, 0x74, 0x84, 0x1f, 0xad, 0x3d, 0x0e,
	0x88, 0xc3, 0x92, 0x8f, 0x0a, 0x76, 0x8b, 0xf9, 0xa3, 0x08, 0x26, 0xc5, 0x04, 0xea, 0x61, 0x4c,
	0x00, 0xeb, 0xa0, 0xe4, 0x0e, 0x88, 0xff, 0xc8, 0xb7, 0x83, 0xa8, 0xc4, 0x45, 0x63, 0x41, 0x98,
	0x97, 0x36, 0x62, 0x05, 0x4a, 0x6c, 0xe0, 0x37, 0x00, 0x04, 0xa4, 0xef, 0xf5, 0x70, 0x60, 0xef,
	0x12, 0x5e, 0xf6, 0xf2, 0xea, 0xed, 0xd7, 0xa9, 0x0b, 0x4f, 0x7a, 0x2b, 0x82, 0x4a, 0x13, 0xa0,
	0x71, 0x9c, 0x31, 0xc8, 0x96, 0x8c, 0x82, 0xc6, 0x22, 0xd6, 0x7e, 0x50, 0xc1, 0x99, 0x83, 0x9f,
	0x25, 0xbc, 0x0e, 0xa0, 0xdb, 0xa2, 0xc4, 0x1f, 0x10, 0x73, 0x3d, 0x62, 0x5b, 0xd6, 0xfa, 0xe8,
	0x3a, 0x2e, 0x8a, 0x43, 0xc1, 0x8d, 0x09, 0x0b, 0x74, 0x80, 0x17, 0x7c, 0x0f, 0x14, 0xbc, 0x2e,
	0xa6, 0x44, 0x5c, 0xda, 0x0b, 0xf1, 0x6b, 0xd8, 0x64, 0xc2, 0x17, 0xc3, 0xea, 0x31, 0x91, 0x03,
	0xff, 0x46, 0x91, 0x2d, 0xfc, 0x3f, 0x98, 0xf5, 0x09, 0xa6, 0xae, 0xc3, 0x0b, 0x5f, 0x4a, 0x78,
	0x02, 0x71, 0x29, 0x12, 0x5a, 0xb8, 0x0b, 0x4a, 0x66, 0x9c, 0x3b, 0x2f, 0x7a, 0x79, 0xf5, 0xd6,
	0x34, 0x1e, 0xad, 0x7c, 0x89, 0xc6, 0x3c, 0xeb, 0x5f, 0x22, 0x4f, 0xc2, 0xc1, 0xfb, 0x00, 0xb4,
	0x5d, 0xc7, 0xb4, 0xd9, 0x29, 0xa9, 0x56, 0xe0, 0x8c, 0xb1, 0xac, 0x8f, 0xcf, 0x2e, 0x3d, 0x9a,
	0x5d, 0x0f, 0x2c, 0x7e, 0x07, 0x19, 0x0b, 0x5d, 0x8b, 0x1d, 0x12, 0x7e, 0x97, 0x22, 0x8a, 0xc6,
	0xf0, 0x6a, 0x7f, 0x2b, 0x40, 0xdb, 0x9f, 0x55, 0xdc, 0xe3, 0x23, 0x18, 0x30, 0x7e, 0x6a, 0xc0,
	0x6c, 0x4e, 0xa3, 0xa6, 0x71, 0xf6, 0x59, 0x83, 0xa6, 0xf6, 0x97, 0x02, 0xce, 0x67, 0x39, 0x1d,
	0x01, 0xf9, 0x7f, 0x99, 0x26, 0xff, 0x9b, 0xd3, 0x3c, 0x73, 0xc6, 0x10, 0xf8, 0x29, 0x07, 0xfe,
	0x97, 0xe5, 0xf2, 0x46, 0xc3, 0xe0, 0x62, 0xcc, 0xf5, 0xd1, 0xf3, 0x91, 0xd1, 0xb7, 0x98, 0x30,
	0x26, 0xfc, 0xf3, 0x20, 0x1f, 0x60, 0x8b, 0x6a, 0xf9, 0x25, 0x35, 0x9e, 0x07, 0x5b, 0xd8, 0xa2,
	0x88, 0x4b, 0x19, 0xfb, 0x31, 0x92, 0xdc, 0x75, 0x1d, 0x22, 0x66, 0x82, 0x2c, 0xde, 0x96, 0x90,
	0x23, 0x69, 0x01, 0x3f, 0x06, 0xf3, 0xd1, 0x36, 0x77, 0x2f, 0x35, 0x27, 0x4e, 0x0b, 0x97, 0xf9,
	0x3b, 0xe3, 0x4a, 0x94, 0xb6, 0x85, 0xef, 0x24, 0xe3, 0x65, 0x8e, 0xbb, 0x9d, 0x10, 0x6e, 0x93,
	0x23, 0xe6, 0x49, 0x2e, 0xfb, 0x8e, 0xf0, 0x51, 0xf3, 0x44, 0x01, 0x9a, 0xe8, 0x94, 0x7c, 0xaa,
	0x82, 0xf4, 0x88, 0xb8, 0x34, 0x77, 0xa7, 0xd9, 0xd9, 0x84, 0x29, 0x96, 0x44, 0xd2, 0x99, 0xcf,
	0x16, 0x65, 0x26, 0xf6, 0x6a, 0x4b, 0x67, 0x7a, 0xd4, 0xa8, 0x87, 0x8f, 0x9a, 0xda, 0xaf, 0x39,
	0xb0, 0x20, 0xb3, 0x92, 0x9b, 0xee, 0xdb, 0x67, 0x91, 0xed, 0x14, 0x8b, 0x34, 0xdf, 0xa8, 0xee,
	0x71, 0xda, 0x99, 0x7b, 0x2a, 0xdd, 0xb7, 0xa7, 0xde, 0x98, 0x4e, 0xb8, 0x97, 0x2f, 0xaa, 0x7b,
	0x0a, 0x38, 0x3d, 0xe1, 0x73, 0x04, 0x64, 0xf5, 0x30, 0x4d, 0x56, 0x6b, 0x53, 0x39, 0x6b, 0x06,
	0x4b, 0x7d, 0x3f, 0x7b, 0xc0, 0x19, 0x8f, 0x70, 0xaf, 0x5b, 0xe4, 0xfc, 0x17, 0x3d, 0x0b, 0x20,
	0x32, 0x8c, 0x39, 0xf0, 0x62, 0xb4, 0xf5, 0x9a, 0x62, 0x41, 0x93, 0x07, 0x18, 0xdb, 0x7c, 0x4d,
	0xb8, 0x04, 0xf2, 0x0e, 0xee, 0xc7, 0x8b, 0xaf, 0xbc, 0x3b, 0xb7, 0x71, 0x9f, 0x20, 0xae, 0x81,
	0x1f, 0x81, 0x7c, 0xb0, 0xe3, 0xc5, 0x44, 0x77, 0x29, 0xb6, 0xd8, 0xda, 0xf1, 0xd8, 0x8a, 0x32,
	0x79, 0x7a, 0xa6, 0x40, 0xdc, 0x05, 0xae, 0x81, 0x59, 0xdc, 0x6e, 0x13, 0x4a, 0x39, 0xe5, 0x95,
	0x8c, 0x95, 0xf8, 0xa6, 0x5c, 0xe5, 0xd2, 0x17, 0xc3, 0xea, 0x7f, 0x27, 0xdc, 0x23, 0x15, 0x07,
	0x11, 0xce, 0xf0, 0x42, 0xb4, 0x7d, 0xcf, 0x71, 0x8c, 0xb2, 0xc0, 0x48, 0x36, 0xf0, 0xcb, 0xa0,
	0xe8, 0x61, 0x4a, 0x1f, 0xb9, 0xbe, 0xa9, 0x15, 0xd3, 0x6c, 0xbc, 0x29, 0xe4, 0x48, 0x5a, 0xb0,
	0x03, 0x87, 0x94, 0xf8, 0x5a, 0x29, 0x7d, 0xe0, 0xbb, 0x94, 0xf8, 0x88, 0x6b, 0x18, 0x1e, 0xbb,
	0x47, 0x2d, 0xb6, 0x98, 0x81, 0x34, 0x5e, 0x43, 0xc8, 0x91, 0xb4, 0x60, 0x84, 0xd3, 0xc2, 0xd4,
	0x6e, 0x5f, 0x0d, 0x83, 0xae, 0x56, 0x4e, 0x13, 0x8e, 0x11, 0x2b, 0x50, 0x62, 0xc3, 0xc6, 0x81,
	0xfc, 0x60, 0x51, 0xb5, 0x63, 0x3c, 0x86, 0x1c, 0x07, 0xc6, 0xb8, 0x12, 0xa5, 0x6d, 0xe1, 0x3a,
	0x58, 0x90, 0x82, 0xf8, 0x70, 0xda, 0x3c, 0x07, 0x38, 0x27, 0x00, 0x16, 0x8c, 0xfd, 0x06, 0x68,
	0xd2, 0x87, 0xa5, 0x6d, 0xd3, 0x06, 0xe9, 0xe0, 0xb0, 0x17, 0x68, 0xc7, 0xd3, 0x69, 0x37, 0x63,
	0x05, 0x4a, 0x6c, 0x58, 0x55, 0x88, 0x69, 0x07, 0xb8, 0xd5, 0x23, 0xda, 0x09, 0x6e, 0x2f, 0xab,
	0xb2, 0x26, 0xe4, 0x48, 0x5a, 0xd4, 0xfe, 0xcc, 0x81, 0xb3, 0x19, 0x7c, 0x31, 0xd5, 0x0d, 0xba,
	0x09, 0x4e, 0xc9, 0xc1, 0x11, 0x87, 0x91, 0x73, 0xe2, 0xec, 0x68, 0x58, 0x3d, 0x35, 0x91, 0x45,
	0xb3, 0x81, 0x0e, 0xf2, 0x49, 0x96, 0x71, 0xf5, 0xb5, 0x96, 0xf1, 0xfc, 0x4b, 0x97, 0xf1, 0xb7,
	0xbb, 0x10, 0x87, 0x60, 0x31, 0xfb, 0x1f, 0x9d, 0x64, 0xe1, 0x51, 0x78, 0xdb, 0x0e, 0x5e, 0x78,
	0xd2, 0x3f, 0x07, 0xe5, 0xb8, 0xe5, 0x21, 0x3f, 0x07, 0xd5, 0xbe, 0x06, 0x25, 0xc9, 0x4f, 0xec,
	0x7e, 0x60, 0xcf, 0x5e, 0xf7, 0xdd, 0xd0, 0x13, 0xbf, 0x26, 0xc9, 0xfb, 0x71, 0x75, 0xb3, 0xc9,
	0xe5, 0x48, 0x5a, 0xb0, 0x57, 0xb8, 0x6d, 0x3b, 0xf1, 0x82, 0x26, 0x5f, 0xe1, 0x0d, 0xdb, 0x31,
	0x11, 0xd7, 0x48, 0x62, 0x52, 0xb3, 0x88, 0xc9, 0xd0, 0x9f, 0xee, 0x55, 0x66, 0x9e, 0xed, 0x55,
	0x66, 0x9e, 0xef, 0x55, 0x66, 0xbe, 0x1d, 0x55, 0x94, 0xa7, 0xa3, 0x8a, 0xf2, 0x6c, 0x54, 0x51,
	0x9e, 0x8f, 0x2a, 0xca, 0xef, 0xa3, 0x8a, 0xf2, 0xdd, 0x1f, 0x95, 0x99, 0xcf, 0x8b, 0x31, 0x97,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x31, 0xcb, 0x57, 0xc0, 0x82, 0x14, 0x00, 0x00,
}

func (m *DatasourceConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatasourceConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatasourceConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.FolderID))
	i--
	dAtA[i] = 0x10
	i -= len(m.Datasource)
	copy(dAtA[i:], m.Datasource)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Datasource)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.URL != nil {
		i -= len(*m.URL)
		copy(dAtA[i:], *m.URL)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.URL)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Slug != nil {
		i -= len(*m.Slug)
		copy(dAtA[i:], *m.Slug)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.Slug)))
		i--
		dAtA[i] = 0x22
	}
	if m.OrgID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.OrgID))
		i--
		dAtA[i] = 0x18
	}
	if m.UID != nil {
		i -= len(*m.UID)
		copy(dAtA[i:], *m.UID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.UID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Templatize != nil {
		{
			size, err := m.Templatize.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	i--
	if m.Overwrite {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.FolderID))
	i--
	dAtA[i] = 0x18
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Grafana != nil {
		{
			size, err := m.Grafana.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Dashboard != nil {
		{
			size, err := m.Dashboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardTemplateList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardTemplateList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardTemplateList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardTemplateReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardTemplateReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardTemplateReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.Version))
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.SchemaVersion))
	i--
	dAtA[i] = 0x30
	i -= len(m.Timezone)
	copy(dAtA[i:], m.Timezone)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Timezone)))
	i--
	dAtA[i] = 0x2a
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.Title)
	copy(dAtA[i:], m.Title)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Title)))
	i--
	dAtA[i] = 0x1a
	if m.UID != nil {
		i -= len(*m.UID)
		copy(dAtA[i:], *m.UID)
		i = encodeVarintGenerated(dAtA, i, uint64(len(*m.UID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GrafanaDashboardTemplateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDashboardTemplateSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDashboardTemplateSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Overwrite {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.FolderID))
	i--
	dAtA[i] = 0x10
	{
		size, err := m.GrafanaDashboardTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDatasource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDatasource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDatasource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDatasourceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDatasourceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDatasourceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrafanaDatasourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDatasourceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDatasourceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Editable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	i--
	if m.IsDefault {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x70
	i -= len(m.BasicAuthPassword)
	copy(dAtA[i:], m.BasicAuthPassword)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BasicAuthPassword)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.BasicAuthUser)
	copy(dAtA[i:], m.BasicAuthUser)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BasicAuthUser)))
	i--
	dAtA[i] = 0x62
	i--
	if m.BasicAuth {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	i -= len(m.Database)
	copy(dAtA[i:], m.Database)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Database)))
	i--
	dAtA[i] = 0x52
	i -= len(m.User)
	copy(dAtA[i:], m.User)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.User)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Password)
	copy(dAtA[i:], m.Password)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Password)))
	i--
	dAtA[i] = 0x42
	i -= len(m.URL)
	copy(dAtA[i:], m.URL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.URL)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Access)
	copy(dAtA[i:], m.Access)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Access)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintGenerated(dAtA, i, uint64(m.OrgID))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.ID))
	i--
	dAtA[i] = 0x10
	if m.Grafana != nil {
		{
			size, err := m.Grafana.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GrafanaDatasourceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrafanaDatasourceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrafanaDatasourceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x1a
	if m.GrafanaDatasourceID != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.GrafanaDatasourceID))
		i--
		dAtA[i] = 0x10
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *ModelTemplateConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelTemplateConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModelTemplateConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Datasource {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i--
	if m.Title {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *TargetRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Kind)
	copy(dAtA[i:], m.Kind)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Kind)))
	i--
	dAtA[i] = 0x12
	i -= len(m.APIGroup)
	copy(dAtA[i:], m.APIGroup)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.APIGroup)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DatasourceConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Datasource)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.FolderID))
	return n
}

func (m *GrafanaDashboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GrafanaDashboardList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GrafanaDashboardReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovGenerated(uint64(*m.ID))
	}
	if m.UID != nil {
		l = len(*m.UID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.OrgID != nil {
		n += 1 + sovGenerated(uint64(*m.OrgID))
	}
	if m.Slug != nil {
		l = len(*m.Slug)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.URL != nil {
		l = len(*m.URL)
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovGenerated(uint64(*m.Version))
	}
	return n
}

func (m *GrafanaDashboardSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grafana != nil {
		l = m.Grafana.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.FolderID))
	n += 2
	if m.Templatize != nil {
		l = m.Templatize.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *GrafanaDashboardStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Dashboard != nil {
		l = m.Dashboard.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GrafanaDashboardTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GrafanaDashboardTemplateList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GrafanaDashboardTemplateReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		n += 1 + sovGenerated(uint64(*m.ID))
	}
	if m.UID != nil {
		l = len(*m.UID)
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Title)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Timezone)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.SchemaVersion))
	n += 1 + sovGenerated(uint64(m.Version))
	return n
}

func (m *GrafanaDashboardTemplateSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GrafanaDashboardTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.FolderID))
	n += 2
	return n
}

func (m *GrafanaDatasource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GrafanaDatasourceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *GrafanaDatasourceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grafana != nil {
		l = m.Grafana.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	n += 1 + sovGenerated(uint64(m.ID))
	n += 1 + sovGenerated(uint64(m.OrgID))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Access)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.URL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Password)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.User)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Database)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.BasicAuthUser)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BasicAuthPassword)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 2
	return n
}

func (m *GrafanaDatasourceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	if m.GrafanaDatasourceID != nil {
		n += 1 + sovGenerated(uint64(*m.GrafanaDatasourceID))
	}
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *ModelTemplateConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	n += 2
	return n
}

func (m *TargetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.APIGroup)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Kind)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DatasourceConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatasourceConfiguration{`,
		`Datasource:` + fmt.Sprintf("%v", this.Datasource) + `,`,
		`FolderID:` + fmt.Sprintf("%v", this.FolderID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboard{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GrafanaDashboardSpec", "GrafanaDashboardSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "GrafanaDashboardStatus", "GrafanaDashboardStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]GrafanaDashboard{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "GrafanaDashboard", "GrafanaDashboard", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GrafanaDashboardList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboardReference{`,
		`ID:` + valueToStringGenerated(this.ID) + `,`,
		`UID:` + valueToStringGenerated(this.UID) + `,`,
		`OrgID:` + valueToStringGenerated(this.OrgID) + `,`,
		`Slug:` + valueToStringGenerated(this.Slug) + `,`,
		`URL:` + valueToStringGenerated(this.URL) + `,`,
		`Version:` + valueToStringGenerated(this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboardSpec{`,
		`Grafana:` + strings.Replace(this.Grafana.String(), "TargetRef", "TargetRef", 1) + `,`,
		`Model:` + strings.Replace(fmt.Sprintf("%v", this.Model), "RawExtension", "runtime.RawExtension", 1) + `,`,
		`FolderID:` + fmt.Sprintf("%v", this.FolderID) + `,`,
		`Overwrite:` + fmt.Sprintf("%v", this.Overwrite) + `,`,
		`Templatize:` + strings.Replace(this.Templatize.String(), "ModelTemplateConfiguration", "ModelTemplateConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&GrafanaDashboardStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Dashboard:` + strings.Replace(this.Dashboard.String(), "GrafanaDashboardReference", "GrafanaDashboardReference", 1) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardTemplate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboardTemplate{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GrafanaDashboardTemplateSpec", "GrafanaDashboardTemplateSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardTemplateList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]GrafanaDashboardTemplate{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "GrafanaDashboardTemplate", "GrafanaDashboardTemplate", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GrafanaDashboardTemplateList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardTemplateReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboardTemplateReference{`,
		`ID:` + valueToStringGenerated(this.ID) + `,`,
		`UID:` + valueToStringGenerated(this.UID) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Timezone:` + fmt.Sprintf("%v", this.Timezone) + `,`,
		`SchemaVersion:` + fmt.Sprintf("%v", this.SchemaVersion) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDashboardTemplateSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDashboardTemplateSpec{`,
		`GrafanaDashboardTemplate:` + strings.Replace(strings.Replace(this.GrafanaDashboardTemplate.String(), "GrafanaDashboardTemplateReference", "GrafanaDashboardTemplateReference", 1), `&`, ``, 1) + `,`,
		`FolderID:` + fmt.Sprintf("%v", this.FolderID) + `,`,
		`Overwrite:` + fmt.Sprintf("%v", this.Overwrite) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDatasource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDatasource{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "GrafanaDatasourceSpec", "GrafanaDatasourceSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "GrafanaDatasourceStatus", "GrafanaDatasourceStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDatasourceList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]GrafanaDatasource{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "GrafanaDatasource", "GrafanaDatasource", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&GrafanaDatasourceList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDatasourceSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GrafanaDatasourceSpec{`,
		`Grafana:` + strings.Replace(this.Grafana.String(), "TargetRef", "TargetRef", 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`OrgID:` + fmt.Sprintf("%v", this.OrgID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Access:` + fmt.Sprintf("%v", this.Access) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Database:` + fmt.Sprintf("%v", this.Database) + `,`,
		`BasicAuth:` + fmt.Sprintf("%v", this.BasicAuth) + `,`,
		`BasicAuthUser:` + fmt.Sprintf("%v", this.BasicAuthUser) + `,`,
		`BasicAuthPassword:` + fmt.Sprintf("%v", this.BasicAuthPassword) + `,`,
		`IsDefault:` + fmt.Sprintf("%v", this.IsDefault) + `,`,
		`Editable:` + fmt.Sprintf("%v", this.Editable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GrafanaDatasourceStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&GrafanaDatasourceStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`GrafanaDatasourceID:` + valueToStringGenerated(this.GrafanaDatasourceID) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelTemplateConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelTemplateConfiguration{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Datasource:` + fmt.Sprintf("%v", this.Datasource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TargetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TargetRef{`,
		`APIGroup:` + fmt.Sprintf("%v", this.APIGroup) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DatasourceConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatasourceConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatasourceConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datasource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderID", wireType)
			}
			m.FolderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, GrafanaDashboard{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UID = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OrgID = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Slug = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.URL = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grafana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grafana == nil {
				m.Grafana = &TargetRef{}
			}
			if err := m.Grafana.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &runtime.RawExtension{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderID", wireType)
			}
			m.FolderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Templatize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Templatize == nil {
				m.Templatize = &ModelTemplateConfiguration{}
			}
			if err := m.Templatize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = GrafanaPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dashboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dashboard == nil {
				m.Dashboard = &GrafanaDashboardReference{}
			}
			if err := m.Dashboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v11.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardTemplateList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, GrafanaDashboardTemplate{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardTemplateReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ID = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UID = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaVersion", wireType)
			}
			m.SchemaVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchemaVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDashboardTemplateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDashboardTemplateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrafanaDashboardTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GrafanaDashboardTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderID", wireType)
			}
			m.FolderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overwrite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overwrite = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDatasource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDatasource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDatasource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDatasourceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDatasourceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDatasourceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, GrafanaDatasource{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDatasourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDatasourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDatasourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grafana", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grafana == nil {
				m.Grafana = &TargetRef{}
			}
			if err := m.Grafana.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = GrafanaDatasourceType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Access", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Access = GrafanaDatasourceAccessType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BasicAuth = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuthUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasicAuthUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicAuthPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BasicAuthPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Editable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrafanaDatasourceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrafanaDatasourceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrafanaDatasourceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrafanaDatasourceID", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GrafanaDatasourceID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = GrafanaPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v11.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelTemplateConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelTemplateConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelTemplateConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Title = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasource", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Datasource = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
