// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// grafana.searchlight.dev_dashboards.yaml
// grafana.searchlight.dev_dashboardtemplates.yaml
// grafana.searchlight.dev_datasources.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _grafanaSearchlightDev_dashboardsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x40\x0b\xe4\xae\x58\x6b\x9b\x5e\x71\xe8\xf9\xa5\x08\x92\xa6\x58\x34\xd7\x06\xc9\x36\x2f\x41\x0a\x8c\xc4\x91\xc5\x5b\x8a\x54\x39\xa4\x77\x9d\xa2\xdf\xbd\x18\x52\x92\x65\x5b\xb2\x37\xdb\x96\x4f\xf6\x90\x9c\xff\xf3\x9b\xa1\xb0\xd3\x9f\xc8\xb3\x76\x76\x0d\xd8\x69\x7a\x0c\x64\xe5\x1f\x17\xf7\x7f\xe0\x42\xbb\x9b\xed\xcb\x92\x02\xbe\xbc\xba\xd7\x56\xad\xe1\x75\xe4\xe0\xda\x0f\xc4\x2e\xfa\x8a\xde\x50\xad\xad\x0e\xda\xd9\xab\x96\x02\x2a\x0c\xb8\xbe\x02\xa8\x3c\xa1\x10\xef\x74\x4b\x1c\xb0\xed\xd6\x60\xa3\x31\x57\x00\x06\x4b\x32\x2c\x67\x00\xb0\xeb\x8a\xfb\x58\x92\xb7\x14\x28\x89\xb2\xd8\xd2\x1a\x98\xd0\x57\x8d\xd1\x9b\x26\x5c\x01\x64\x9a\x42\x6e\x4a\x87\x5e\x71\xb1\xf1\x58\xa3\xc5\x62\x72\xac\x50\xb4\xbd\xe2\x8e\x2a\x61\xbc\xf1\x2e\x76\x6b\x58\x3a\x96\x39\xf6\x2a\x54\x18\x68\xe3\xbc\x1e\xfe\xaf\x86\x6b\xfd\xbf\x43\x55\x84\x82\x5d\xc7\x95\x53\x94\xfe\x66\x97\xbc\x19\x74\x4b\x34\xa3\x39\xfc\xe5\x90\xfe\x4e\x73\xbe\xde\x99\xe8\xd1\x4c\xad\x49\x64\xd6\x76\x13\x0d\xfa\xc9\xc6\x15\x40\xe7\x89\xc9\x6f\xe9\xef\xf6\xde\xba\x07\xfb\x56\x93\x51\xbc\x86\x1a\x0d\x8b\x74\xae\x5c\x47\x6b\xf8\xab\x18\xd3\x61\x45\x72\x85\x63\xe9\xfb\xc8\xf4\x06\x71\xc0\x10\x79\x0d\xff\xfa\xf7\x15\xc0\x16\x8d\x56\x29\x30\x79\xd3\x75\x64\x5f\xbd\xbf\xfd\xf4\xc3\xc7\xaa\xa1\x16\x33\x51\x04\xbb\x8e\x7c\x18\x9d\x92\x63\x35\x66\xc9\x48\x03\x50\xc4\x95\xd7\x5d\xe2\x08\x2f\x84\x55\x3e\x03\x4a\xf2\x82\x18\x42\x43\xb0\xcd\x34\x52\xc0\x49\x0c\xb8\x1a\x42\xa3\x19\x3c\x25\x13\x6d\x48\x2a\x4d\xd8\x82\x1c\x41\x0b\xae\xfc\x85\xaa\x50\xc0\x47\x71\x83\x67\xe0\xc6\x45\xa3\xa0\x72\x76\x4b\x3e\x80\xa7\xca\x6d\xac\xfe\x3a\x72\x66\x08\x2e\x89\x34\x18\xa8\x77\xf9\xb0\xb4\x0d\xe4\x2d\x1a\x71\x42\xa4\x6b\x40\xab\xa0\xc5\x1d\x78\x12\x19\x10\xed\x84\x5b\x3a\xc2\x05\xfc\xec\x3c\x81\xb6\xb5\x5b\x43\x13\x42\xc7\xeb\x9b\x9b\x8d\x0e\x43\x5d\x54\xae\x6d\xa3\xd5\x61\x77\x53\x39\x1b\xbc\x2e\x63\x70\x9e\x6f\x14\x6d\xc9\xdc\xb0\xde\xac\x24\x75\x74\xa0\x2a\x44\x4f\x37\xd8\xe9\x55\x52\xdc\x86\x54\x5c\xad\xfa\xd5\x18\xaa\x17\x13\x4d\xc3\x4e\xa2\xca\xc1\x6b\xbb\x19\xc9\x29\xcf\x16\xfd\x2e\xd9\x06\x9a\x01\xfb\x6b\x59\xff\xbd\x7b\x85\x24\x5e\xf9\xf0\xa7\x8f\x77\x30\x08\x4d\x21\x38\xf4\x79\xf2\xf6\xfe\x1a\xef\x1d\x2f\x8e\xd2\xb6\x26\x9f\x03\x57\x7b\xd7\x26\x8e\x64\x55\xe7\xb4\x0d\xe9\x4f\x65\x34\xd9\x43\xa7\x73\x2c\x5b\x1d\x24\xd2\xff\x8c\xc4\x41\xe2\x53\xc0\x6b\xb4\xd6\x05\x28\x09\x62\xa7\x30\x90\x2a\xe0\xd6\xc2\x6b\x6c\xc9\xbc\x46\xa6\xff\xbb\xdb\xc5\xc3\xbc\x12\x97\x5e\x76\xfc\x14\xd4\x86\x35\x57\x1e\xb2\x12\x50\x1d\x50\x00\x5a\x7c\x7c\x47\x76\x13\x9a\x35\xfc\xf8\xc3\xd1\x5e\x87\x41\x52\x72\x0d\xff\xf8\x8c\xab\xaf\x5f\xbe\xfb\xbc\xc2\xd5\xd7\xdf\xae\x7e\xfa\xf2\x9b\xcf\xfd\x8f\xef\xff\xf8\xeb\xa3\x3b\xb3\x4a\x0e\xe4\x1c\xc0\x91\x3c\xe0\xe1\x25\xbd\x6b\x67\x14\xf9\x5b\x75\xac\x7b\xed\x7c\x8b\x61\x2d\x95\xf3\xe3\xef\x67\xf5\x90\x9a\xda\x90\x3f\xd8\xeb\xf1\xf3\x98\xd9\x92\x70\x58\xc4\x96\x0b\x26\xe7\x75\x5c\x18\x4f\xba\x34\x17\xa8\x0b\x97\x66\x1d\x2c\xab\x75\x8a\xcc\x31\xb3\xc5\xd3\x00\x8f\xab\x7d\xc7\x5b\x0d\x08\xbf\x8a\x19\xe2\x57\x75\x8f\xf1\xc1\x47\x3a\xac\xcd\x2d\xf9\x07\xaf\xc3\x89\xde\x59\x54\xe9\x9c\x21\x9c\x42\xa8\x54\x9c\xf6\x74\xe0\x9c\xd5\x18\xea\x03\xe2\xc8\xfb\x62\x42\xe5\x5e\xf2\x84\x94\xaa\x9c\x55\x69\x2a\x38\x89\xf6\x01\x72\x7d\x18\xa1\x66\x82\xda\x80\x5b\xd4\x06\x4b\x43\xe0\x4a\x71\x4f\xea\x0e\x9c\x5a\xc2\x51\xab\x3d\x10\x19\xbd\x27\x1b\x92\x92\x54\x1c\x6d\xeb\x40\xed\x4c\xe2\x9d\x4b\x4a\x19\x55\x38\xdc\x79\xb4\xac\x87\x51\x66\xee\xd4\x91\x49\xef\x90\x03\x04\xdd\x52\x86\xc4\xc1\x0f\x10\x46\x46\xa4\x32\x7e\x3a\x4b\xbd\x47\x67\xb9\x82\xf4\x32\xb4\x2e\x34\xe4\x0b\xb8\x13\xd8\xed\xdb\x5f\x49\xf0\xd0\x90\x4d\x02\xa2\x55\xe4\xcd\x4e\x10\x7e\x2f\xab\x6a\xd0\x6e\x04\x56\xe1\xb6\x5e\xe2\xdd\x60\x90\x96\x21\x40\x9c\x52\xef\x5a\xd8\x59\x88\x3c\x34\x8b\x64\xc3\x28\xe7\xd5\xfb\x5b\x48\xc9\x39\x30\x5f\xe0\x2b\x5d\xa8\xaa\xa8\x0b\x12\xbf\xe3\x28\xe4\x35\xc0\x8a\x40\xff\x4a\xa4\xcc\x9e\x3a\x5b\xc0\x82\xcb\xcc\xb8\x79\x4a\x40\x5e\x41\x13\x5b\xb4\xe0\x09\x55\x4a\xaa\xfe\x2a\x68\xab\x74\x85\xa9\x39\x2a\x0a\xa8\x0d\x03\x96\x2e\x1e\x17\xec\xde\x63\x34\x09\x62\x1f\x91\xec\x12\xe9\x8e\x25\x01\xb5\x5d\xd8\xcd\xdb\x7c\xc1\x9a\x9c\xe7\xa4\xfe\x4c\x96\xfc\x64\x3e\x3b\x6b\xd8\x6d\x0d\x4c\xe1\xfa\x68\x94\xca\x95\x54\x0c\x7d\xab\xd8\x8c\x2c\xcf\x65\xc2\x61\xae\x3e\x20\x0b\x6b\x28\x91\x49\x41\xec\xc4\xdc\xb7\xce\x83\xb6\x1c\xd0\x56\x74\x0d\xba\xfe\x16\x11\x9a\x87\xea\x34\x3b\x78\xf9\xbb\x6b\x28\x63\x16\x59\xe4\xfc\x2f\x46\xd1\x9f\x1f\xbf\x14\xa7\xce\x58\x66\xfb\xd3\xf5\x91\xea\x9a\xc1\xc5\x20\x58\x21\xe9\x05\x0f\x3a\x34\x32\xf1\x74\x32\xd8\xf4\xb3\x61\xaf\xca\x02\xd3\x04\x1f\x79\x42\xa5\xd1\xe0\xf3\x89\x3c\xd7\x1f\x7b\xdf\x2e\x76\xc9\xbc\x3c\x21\x3f\x29\xd6\x77\x0d\xf5\x87\x45\xea\xa1\xcd\x2f\x38\x21\xd5\x24\x39\x41\x2f\xb9\x6c\x32\x64\x09\x4b\xf1\x8b\xae\x75\x95\xca\x5b\xb2\xb8\x6a\x9c\xe3\x54\xf6\x02\x3b\xe0\x7c\x02\x88\x30\xa6\xfa\x99\x00\x3b\xcb\x5a\x91\x27\x05\x08\x9b\x88\x1e\x6d\x20\x52\xc2\xf9\xa4\x56\xfa\xe9\xef\xf9\xf5\x72\xda\x88\x16\xfc\xf6\x31\x1d\x1c\xc2\x39\xba\xec\x3a\x81\xaf\xab\xe1\xce\xcb\x53\xe0\xad\xbc\xa8\xae\xa1\x7f\x67\x3d\x4b\xa3\xb4\xfd\x84\x38\xee\xba\x24\x77\x92\xb0\x93\xc9\x17\x52\x8d\x41\xed\x5c\x41\x8f\xd8\x76\x86\x8a\xca\xb5\x37\xfb\xa0\x2d\xb8\xff\x67\xb4\x3b\xd8\x17\x51\x21\xca\xf4\x6f\x18\x40\x4f\x39\x36\x1c\xa4\x3b\x62\xe5\x1d\xf3\xf8\x08\x58\x6a\x3d\x46\xdf\x13\xbc\x1a\xfa\x70\x2e\xd8\x92\x2a\x8c\x4c\x80\xbe\xd4\xc1\xa3\xdf\x4d\xba\x3c\x54\x68\xd3\x40\xcf\x54\x47\xb3\xc0\xf4\x3b\x26\x82\xc2\x3a\x45\x27\x75\xcf\xdf\xe7\x42\xc6\x52\x1b\x1d\x76\x52\xaa\x8a\x2a\x67\x6b\xa3\x2b\xe9\x53\x4b\x79\xd7\x76\xce\x07\xb4\xe1\x19\x31\x9b\x1b\x90\xf2\x5a\xcd\x74\xfe\x99\x43\x7d\x1f\x99\xd9\xc9\x95\x3a\xb3\xb1\xd0\xee\x57\x49\xd3\x13\xf2\x99\x29\x32\x6f\xa1\xf7\xb8\x3b\xd8\x19\x3f\x1f\x9c\x1d\xbb\xc6\x21\x6a\xe8\x81\xfd\x43\xbd\x7f\x8e\xed\xb9\x08\x88\xa2\x74\x81\x6f\x18\xe6\xf5\xec\x3c\x7e\x09\x2b\xcf\x23\xa5\xf3\x9b\xdb\x37\xff\x7b\xb6\x6c\xe2\xe6\x9b\x1f\x0f\x71\xde\xc0\xf3\x77\xfc\xc9\x13\xe1\xe2\x9d\xed\xf2\x8b\xe8\xbf\xb1\x7a\x31\xa9\x2e\xcf\x20\x07\x39\xf4\xb7\x93\xe3\xd2\x05\x24\x8b\x5a\xc7\xe9\xd3\x8c\xc0\xcd\x7e\x34\x18\xf9\x9f\xe8\x9b\x1b\x9a\xde\x83\x52\x01\xb7\x01\x2a\xe7\xa5\x6f\x3b\xab\xc6\x8f\x3a\xc3\xfe\x0b\x9e\xf0\xbd\x86\x87\x46\x57\xcd\x69\x1a\xf2\x98\xce\xce\x42\x1b\xf3\x37\x26\x28\x77\xe3\x38\x9b\xbf\x6d\x1c\x23\xc7\xf3\x1e\xbd\x5d\x83\x7c\x82\xff\x07\xfe\x7a\x2f\x27\x8e\xea\x2d\xcf\x1a\xc9\xf6\x4f\x18\x4d\x80\xca\x44\x0e\xe4\xe1\x97\xd8\x76\x0c\xfa\xa4\x15\x2d\x26\xcc\xfc\x20\x71\x71\x84\xe8\x9f\x4c\x49\xfb\x67\x7f\x68\x38\x22\x0d\x79\x0b\xdb\x97\x68\xba\x06\x5f\xee\x69\x09\x2d\x56\xfd\x07\xdd\xc9\x36\x40\x4e\x8d\xc9\xbb\x97\x83\xf3\x32\xdf\x67\xca\x7f\x02\x00\x00\xff\xff\x8a\x9c\x80\x8b\xa3\x16\x00\x00")

func grafanaSearchlightDev_dashboardsYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_dashboardsYaml,
		"grafana.searchlight.dev_dashboards.yaml",
	)
}

func grafanaSearchlightDev_dashboardsYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_dashboardsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_dashboards.yaml", size: 5795, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grafanaSearchlightDev_dashboardtemplatesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\xe3\x44\x10\xbd\xe7\x57\x94\xc4\x61\x2f\x24\xd1\x08\x84\x90\x6f\x68\x16\xa4\x15\x20\xa1\x9d\x61\xef\x65\x77\xc5\x29\xa6\xdd\xdd\x54\x55\x7b\x99\x45\xfc\x77\xd4\x6d\x27\x93\x8c\x3d\xb3\x42\x62\x73\xeb\x57\x9f\xfd\x5e\x55\xc7\x98\xf8\x03\x89\x72\x0c\x0d\x60\x62\xfa\xcb\x28\x94\x93\xee\x1e\xbe\xd7\x1d\xc7\xfd\x78\xd3\x92\xe1\xcd\xe6\x81\x83\x6b\xe0\x36\xab\xc5\xe1\x3d\x69\xcc\xd2\xd1\x5b\x3a\x70\x60\xe3\x18\x36\x03\x19\x3a\x34\x6c\x36\x00\x9d\x10\x16\xf0\x9e\x07\x52\xc3\x21\x35\x10\xb2\xf7\x1b\x00\x8f\x2d\x79\x2d\x3e\x00\x98\xd2\xee\x21\xb7\x24\x81\x8c\x6a\xa9\x80\x03\x35\xa0\x84\xd2\x1d\x3d\xf7\x47\xdb\x00\x4c\x98\x43\x3d\xb6\x11\xc5\x19\x0d\xc9\x63\xf1\xef\x05\x0f\x18\x70\x77\xe1\xbe\x73\x34\x6e\x34\x51\x57\x0a\xf4\x12\x73\x6a\xe0\x25\xb7\x29\xf3\xdc\x4a\x87\x46\x7d\x14\x3e\x9d\xb7\xa7\xb0\xf9\x74\xdd\x52\x41\x30\x25\xed\xa2\xa3\x7a\x9c\xa8\x79\x7b\xea\xf1\x7e\xee\xb1\xda\x3c\xab\xfd\xbc\x6e\xff\x85\x75\x4a\x97\x7c\x16\xf4\x6b\xb7\xac\x66\xe5\xd0\x67\x8f\xb2\xe2\xb0\x01\x48\x42\x4a\x32\xd2\xef\xe1\x21\xc4\x8f\xe1\x27\x26\xef\xb4\x81\x03\x7a\x2d\x66\xed\x62\xa2\x06\x6e\x7d\x56\x23\x29\x40\x6e\x65\x96\x6f\xbe\xad\x1a\x5a\xd6\x06\xfe\xfe\x67\x03\x30\xa2\x67\x57\xd5\x9b\x8c\x31\x51\xf8\xe1\xb7\x77\x1f\xbe\xb9\xeb\x8e\x34\xe0\x04\x96\xaa\x31\x91\xd8\x99\xb1\x49\xd0\xf3\x28\x9d\x31\x00\x47\xda\x09\xa7\x9a\x11\xde\x94\x54\x93\x0f\xb8\x32\x3c\xa4\x60\x47\x82\x71\xc2\xc8\x81\xd6\x32\x10\x0f\x60\x47\x56\x10\xaa\xf7\x0b\x56\x5b\xba\x48\x0b\xc5\x05\x03\xc4\xf6\x0f\xea\x6c\x07\x77\x85\x03\x51\xd0\x63\xcc\xde\x41\x17\xc3\x48\x62\x20\xd4\xc5\x3e\xf0\xa7\x73\x66\x05\x8b\xb5\x64\xe5\xd7\xae\x32\x72\x30\x92\x80\xbe\x90\x90\xe9\x6b\xc0\xe0\x60\xc0\x47\x10\x2a\x35\x20\x87\x8b\x6c\xd5\x45\x77\xf0\x6b\x14\x02\x0e\x87\xd8\xc0\xd1\x2c\x69\xb3\xdf\xf7\x6c\xa7\xe5\xe9\xe2\x30\xe4\xc0\xf6\xb8\xef\x62\x30\xe1\x36\x5b\x14\xdd\x3b\x1a\xc9\xef\x95\xfb\x6d\x99\x2b\x36\xea\x2c\x0b\xed\x31\xf1\xb6\x36\x1e\xac\x6e\xe0\xe0\xbe\x3a\x4b\xf5\xe6\xa2\x53\x7b\x2c\x92\xaa\x09\x87\xfe\x0c\xd7\x21\x7c\x91\xf7\x32\x82\xc0\x0a\x38\x87\x4d\xfd\x3f\xd1\x5b\xa0\xc2\xca\xfb\x1f\xef\xee\xe1\x54\xb4\x4a\x70\xcd\x79\x65\xfb\x29\x4c\x9f\x88\x2f\x44\x71\x38\x90\x4c\xc2\x1d\x24\x0e\x35\x23\x05\x97\x22\x07\xab\x87\xce\x33\x85\x6b\xd2\x35\xb7\x03\x5b\x51\xfa\xcf\x4c\x6a\x45\x9f\x1d\xdc\x62\x08\xd1\xa0\x25\xc8\xc9\xa1\x91\xdb\xc1\xbb\x00\xb7\x38\x90\xbf\x45\xa5\x2f\x4e\x7b\x61\x58\xb7\x85\xd2\xcf\x13\x7f\xf9\xf2\x5d\x3b\x4e\x6c\x9d\xe1\xd3\xcb\x74\xfa\xad\xed\x50\x55\xee\xf9\x96\x5f\x9b\x5f\x0e\xac\x33\xec\x96\x18\xc0\x21\xca\x80\xd6\x94\x09\xff\xee\xdb\x15\xfb\xd4\x6f\x99\xff\xbe\x3e\x12\xd7\xbf\x69\x73\x56\x76\xfb\xff\x49\x6f\xd8\xaf\x5c\x04\x80\x8d\x86\x55\xc3\x0b\x42\x3c\x37\xa3\x08\x3e\x2e\xab\xf1\x40\x9f\x62\x58\x90\xfa\xd9\xb4\xc6\xe6\xff\x7b\x54\x5e\x17\xe4\xd5\x98\xf1\xcb\x30\x5d\x36\x8c\x85\x16\xfd\x6c\x81\xdd\x02\xba\xd2\x7c\x61\x2d\x92\x2d\xc1\x99\xd9\x15\x83\xf9\x25\x9a\x57\xaa\x8e\xab\xf5\x56\xb7\x69\x62\xc3\x3b\x92\x77\x8b\x1b\xbd\xc6\xd2\xcb\x0c\xc5\x91\xe4\xa3\xf0\x72\xdf\xa6\x90\x36\x46\x4f\x78\xd9\xdb\x1a\xa1\xdb\xd5\x3f\xe9\x27\xeb\xa9\xe5\x2b\xf0\x5c\xf9\xf5\x27\xe4\x19\x74\x1a\x13\x18\x6f\xd0\xa7\x23\xde\x3c\x61\x75\x6d\xb6\xf3\xc7\xd3\x85\x19\xa0\x7e\x2b\xb8\x06\x4c\x32\xcd\xff\xfe\x51\xb0\xa7\x19\xf9\x37\x00\x00\xff\xff\x6e\x63\x55\x86\x0f\x0a\x00\x00")

func grafanaSearchlightDev_dashboardtemplatesYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_dashboardtemplatesYaml,
		"grafana.searchlight.dev_dashboardtemplates.yaml",
	)
}

func grafanaSearchlightDev_dashboardtemplatesYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_dashboardtemplatesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_dashboardtemplates.yaml", size: 2575, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grafanaSearchlightDev_datasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\x24\x35\x0c\xbd\xf7\xaf\xb0\xc4\x61\x2f\xdb\xd5\x1a\x81\x10\xaa\xdb\x6a\x16\xd0\x88\xaf\xd5\xce\xb2\x77\x77\xe2\xae\x0a\x93\x72\x42\xec\xf4\x32\x20\xfe\x3b\x4a\x52\x55\x5d\x3d\xc3\x2c\x27\xfa\x96\x67\xd7\xb3\xf3\x9e\x9d\xc6\xe8\x3e\x52\x12\x17\xb8\x07\x8c\x8e\xfe\x50\xe2\x72\x92\xee\xe1\x1b\xe9\x5c\x38\x9c\x6f\x8e\xa4\x78\xb3\x7b\x70\x6c\x7b\xb8\xcd\xa2\x61\x7a\x4f\x12\x72\x32\xf4\x96\x4e\x8e\x9d\xba\xc0\xbb\x89\x14\x2d\x2a\xf6\x3b\x00\x93\x08\x0b\xf8\xc1\x4d\x24\x8a\x53\xec\x81\xb3\xf7\x3b\x00\x8f\x47\xf2\x52\x72\x00\x30\xc6\xee\x21\x1f\x29\x31\x29\xd5\x52\x8c\x13\xf5\x20\x84\xc9\x8c\xde\x0d\xa3\xee\x00\x1a\x56\x98\x5b\x49\xe9\x86\x84\x27\x64\xec\x36\x79\x9d\xa5\xf3\x4e\x22\x99\xc2\x3c\xa4\x90\x63\x0f\x2f\xa5\x35\xca\xb9\x07\x83\x4a\x43\x48\x6e\x39\xef\x97\xcf\xe6\xd3\x75\x2f\x05\xc1\x18\xc5\x04\x4b\xf5\xd8\x34\x79\xbb\x36\x57\x41\xef\x44\x7f\x78\x12\xf8\xd1\x49\x23\x88\x3e\x27\xf4\x57\x17\xaa\xb8\x38\x1e\xb2\xc7\xb4\x8d\xec\x00\x62\x22\xa1\x74\xa6\x5f\xf9\x81\xc3\x27\xfe\xce\x91\xb7\xd2\xc3\x09\xbd\x94\xb0\x98\x10\xa9\x87\x9f\xcb\x85\x22\x1a\xb2\x05\xcb\xc7\x34\xdb\x33\x5f\x4a\x14\x35\x4b\x0f\x7f\xfd\xbd\x03\x38\xa3\x77\xb6\xba\xd3\x82\x21\x12\xbf\x79\x77\xf7\xf1\xcb\x7b\x33\xd2\x84\x0d\x2c\x85\x43\xa4\xa4\xab\x30\xcd\xb0\x75\x54\x56\x0c\xc0\x92\x98\xe4\x62\x65\x84\x57\x85\xaa\xe5\x80\x2d\xc3\x41\x02\x3a\x12\x9c\x1b\x46\x16\xa4\x96\x81\x70\x02\x1d\x9d\x40\xa2\x7a\x45\xd6\xda\xd2\x86\x16\x4a\x0a\x32\x84\xe3\x6f\x64\xb4\x83\xfb\x22\x43\x12\x90\x31\x64\x6f\xc1\x04\x3e\x53\x52\x48\x64\xc2\xc0\xee\xcf\x95\x59\x40\x43\x2d\xe9\x51\x69\x16\x7d\xf9\x39\x56\x4a\x8c\xbe\x88\x90\xe9\x35\x20\x5b\x98\xf0\x11\x12\x95\x1a\x90\x79\xc3\x56\x53\xa4\x83\x9f\x42\x22\x70\x7c\x0a\x3d\x8c\xaa\x51\xfa\xc3\x61\x70\xba\x2c\x87\x09\xd3\x94\xd9\xe9\xe3\xc1\x04\xd6\xe4\x8e\x59\x43\x92\x83\xa5\x33\xf9\x83\xb8\x61\x5f\xc6\xc7\x29\x19\xcd\x89\x0e\x18\xdd\xbe\x36\xce\x5a\x37\x6c\xb2\x5f\xac\x56\xbd\xda\x74\xaa\x8f\xc5\x55\xd1\xe4\x78\x58\xe1\x3a\x6b\x2f\xea\x5e\x06\x0e\x9c\x00\xce\x9f\xb5\xfe\x2f\xf2\x16\xa8\xa8\xf2\xfe\xdb\xfb\x0f\xb0\x14\xad\x16\x5c\x6b\x5e\xd5\xbe\x7c\x26\x17\xe1\x8b\x50\x8e\x4f\x94\x9a\x71\xa7\x14\xa6\xca\x48\x6c\x63\x70\xac\xf5\x60\xbc\x23\xbe\x16\x5d\xf2\x71\x72\x5a\x9c\xfe\x3d\x93\x68\xf1\xa7\x83\x5b\x64\x0e\x0a\x47\x82\x1c\x2d\x2a\xd9\x0e\xee\x18\x6e\x71\x22\x7f\x8b\x42\xff\xbb\xec\x45\x61\xd9\x17\x49\xff\x5b\xf8\xed\xcb\x76\x9d\xd8\xd4\x5a\xe1\xe5\x01\xfa\x7c\x52\x5b\xc6\x4d\xda\xbf\xad\x5a\xf3\xa2\xae\xbe\xfd\x9e\x98\xd2\x66\x63\x5f\x18\x81\x5f\x9e\xa5\x97\x79\x28\xa6\x4c\x41\xea\xa2\x10\x2b\x0c\x97\xe8\xc2\xff\x84\x14\xe0\x14\xd2\xb2\x9c\x6d\x4e\x3a\xb8\x53\x30\x21\x25\x92\x18\xd8\xae\x2b\xb6\xc4\x5f\xc9\x86\xf7\x35\x7c\x1a\x9d\x19\x9f\xb1\x3a\x59\xbc\x86\xc0\x30\xe5\xb6\xf1\x70\x7c\xac\x54\x6f\xde\xdd\xcd\x93\xd6\xed\x9e\x75\x33\xa1\xf6\x65\x79\xbf\xfe\xea\x49\xac\x29\x5c\xd6\x7a\xa0\xf4\x79\xe5\x9f\x40\xe7\xe5\x3f\xef\x7c\x83\x3e\x8e\x78\x73\xc1\xaa\x0d\xfb\xf9\x8f\x67\x13\x06\x68\x7a\xf5\xa0\x29\xd3\xfc\xb2\x86\x84\x03\xcd\xc8\x3f\x01\x00\x00\xff\xff\xc5\xa8\x91\x03\x4b\x07\x00\x00")

func grafanaSearchlightDev_datasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_datasourcesYaml,
		"grafana.searchlight.dev_datasources.yaml",
	)
}

func grafanaSearchlightDev_datasourcesYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_datasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_datasources.yaml", size: 1867, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"grafana.searchlight.dev_dashboards.yaml":         grafanaSearchlightDev_dashboardsYaml,
	"grafana.searchlight.dev_dashboardtemplates.yaml": grafanaSearchlightDev_dashboardtemplatesYaml,
	"grafana.searchlight.dev_datasources.yaml":        grafanaSearchlightDev_datasourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"grafana.searchlight.dev_dashboards.yaml":         {grafanaSearchlightDev_dashboardsYaml, map[string]*bintree{}},
	"grafana.searchlight.dev_dashboardtemplates.yaml": {grafanaSearchlightDev_dashboardtemplatesYaml, map[string]*bintree{}},
	"grafana.searchlight.dev_datasources.yaml":        {grafanaSearchlightDev_datasourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
