// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// grafana.searchlight.dev_dashboards.yaml
// grafana.searchlight.dev_dashboardtemplates.yaml
// grafana.searchlight.dev_datasources.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _grafanaSearchlightDev_dashboardsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdc\x36\x0c\x7f\xbf\x4f\x41\x60\x03\xb2\x0d\xf1\x65\x41\x87\x62\xf3\xcb\x50\xa4\xeb\x10\xac\xdb\x8a\x26\xeb\x4b\xd1\x01\xb4\xc5\x3b\xab\x91\x25\x4f\xa4\xae\x4d\x86\x7d\xf7\x41\xb2\x7d\xf1\xbf\x4b\xd2\xa0\xf5\x53\x8e\x14\xc9\x9f\x7e\x24\x25\x2a\xd8\xe8\x37\xe4\x59\x3b\x9b\x03\x36\x9a\x3e\x0a\xd9\xf8\x8b\xd7\x57\x3f\xf2\x5a\xbb\x93\xdd\x69\x41\x82\xa7\xab\x2b\x6d\x55\x0e\x67\x81\xc5\xd5\xaf\x89\x5d\xf0\x25\x3d\xa7\x8d\xb6\x5a\xb4\xb3\xab\x9a\x04\x15\x0a\xe6\x2b\x80\xd2\x13\x46\xe1\xa5\xae\x89\x05\xeb\x26\x07\x1b\x8c\x59\x01\x18\x2c\xc8\x70\x5c\x03\x80\x4d\x93\x03\x13\xfa\xb2\x32\x7a\x5b\xc9\x0a\xc0\x62\x4d\x39\x28\xe4\xaa\x70\xe8\x15\xaf\xb7\x1e\x37\x68\x71\x3d\x58\xb6\x56\xb4\x5b\x71\x43\x65\xf4\xb2\xf5\x2e\x34\x39\x1c\x5a\xd6\x7a\xec\xe2\x95\x28\xb4\x75\x5e\xf7\xbf\xb3\xde\xac\xfb\x35\x86\x12\x25\xd8\x34\x5c\x3a\x45\xe9\x67\xbb\xff\xe7\x3d\xb6\x24\x33\x9a\xe5\xb7\xb1\xfc\xa5\xe6\xd6\xbc\x31\xc1\xa3\x19\xee\x26\x89\x59\xdb\x6d\x30\xe8\x07\x8a\x15\x40\xe3\x89\xc9\xef\xe8\x2f\x7b\x65\xdd\x07\xfb\x42\x93\x51\x9c\xc3\x06\x0d\xc7\xe8\x5c\xba\x86\x72\xf8\x23\x6e\xa6\xc1\x92\xa2\x09\x87\xc2\x77\x69\xe8\x36\xc4\x82\x12\x38\x87\x7f\xff\x5b\x01\xec\xd0\x68\x95\xb2\xd0\x2a\x5d\x43\xf6\xd9\xab\xf3\x37\x4f\x2e\xca\x8a\x6a\x6c\x85\x31\xb0\x6b\xc8\xcb\x9e\x94\x36\x31\xfb\x92\xd8\xcb\x00\x14\x71\xe9\x75\x93\x3c\xc2\x51\x74\xd5\xae\x01\x15\x8b\x80\x18\xa4\x22\xd8\xb5\x32\x52\xc0\x29\x0c\xb8\x0d\x48\xa5\x19\x3c\xa5\x2d\x5a\x49\x90\x06\x6e\x21\x2e\x41\x0b\xae\x78\x4f\xa5\xac\xe1\x22\xd2\xe0\x19\xb8\x72\xc1\x28\x28\x9d\xdd\x91\x17\xf0\x54\xba\xad\xd5\x37\x7b\xcf\x0c\xe2\x52\x48\x83\x42\x1d\xe5\xfd\xa7\xad\x90\xb7\x68\x22\x09\x81\x8e\x01\xad\x82\x1a\xaf\xc1\x53\x8c\x01\xc1\x0e\xbc\xa5\x25\xbc\x86\xdf\x9d\x27\xd0\x76\xe3\x72\xa8\x44\x1a\xce\x4f\x4e\xb6\x5a\xfa\x26\x28\x5d\x5d\x07\xab\xe5\xfa\xa4\x74\x56\xbc\x2e\x82\x38\xcf\x27\x8a\x76\x64\x4e\x58\x6f\xb3\x58\x3a\x5a\xa8\x94\xe0\xe9\x04\x1b\x9d\x25\xe0\x56\x52\x27\xd5\xea\xab\x7d\xaa\x8e\x06\x48\xe5\x3a\x66\x95\xc5\x6b\xbb\xdd\x8b\x53\x9d\x1d\xe4\x3d\x56\x1b\x68\x06\xec\xcc\x5a\xfc\xb7\xf4\x46\x51\x64\xe5\xf5\x2f\x17\x97\xd0\x07\x4d\x29\x18\x73\x9e\xd8\xbe\x35\xe3\x5b\xe2\x23\x51\xda\x6e\xc8\xb7\x89\xdb\x78\x57\x27\x8f\x64\x55\xe3\xb4\x95\xf4\xa3\x34\x9a\xec\x98\x74\x0e\x45\xad\x25\x66\xfa\x9f\x40\x2c\x31\x3f\x6b\x38\x43\x6b\x9d\x40\x41\x10\x1a\x85\x42\x6a\x0d\xe7\x16\xce\xb0\x26\x73\x86\x4c\x5f\x9c\xf6\xc8\x30\x67\x91\xd2\xfb\x89\x1f\x9e\x60\xfd\xb7\xd4\x1e\xf1\x4b\x07\xd5\x48\x02\x50\xe3\xc7\x97\x64\xb7\x52\xe5\xf0\xf4\xc9\x44\xd7\xa0\xc4\x92\xcc\xe1\xef\xb7\x98\xdd\xbc\xfb\xe6\x6d\x86\xd9\xcd\xf7\xd9\x4f\xef\xbe\x7b\xdb\xfd\xf1\xed\xcf\x5f\x4f\x6c\x16\x41\xf6\xe2\x36\x81\x7b\x71\x7f\x1e\xde\x87\x7b\x7f\xe6\x4c\xc1\x1f\x32\x88\x9f\x9e\xad\x8e\xdf\xc6\xf9\x1a\x25\x8f\xcd\xf6\xf4\x87\x05\x7d\x8b\x33\xb6\xe2\x96\xfc\x4c\xdf\x36\xf1\xc2\x31\xf3\x79\xdc\x0b\x6e\x17\x36\x02\xa0\x85\xea\x45\xc5\x41\xba\xc7\x6a\xf4\x1e\xaf\xe7\xd1\x74\x4d\x37\xce\xce\x2a\xe2\x5e\xb7\xa2\xc5\x7c\xba\x55\x58\x4e\xc8\x9d\x36\xbb\x2f\xc3\x74\x6c\x76\xed\x69\x86\x27\x03\xad\x66\xa2\x51\xce\x67\xda\x98\xb2\xb9\xb0\x63\x76\x41\x21\x66\x2e\x0d\x0b\x51\x77\x8b\xf1\x16\xbb\xa8\x65\xc3\x28\xf2\xe7\xb3\x1d\xdd\xc5\xd2\x61\x86\xba\x09\xe3\x53\xba\x6d\xf9\xf6\x1d\x87\x3a\x90\xe4\xe9\xd5\xf1\x20\xa3\xa5\xa3\xec\x1e\xa3\x83\xe4\x55\x8e\x85\xd4\x7e\x16\x3a\x7f\xfe\x79\x58\xac\x9d\x22\x33\x75\x75\x10\x04\xc0\xc7\xec\x2a\x14\xe4\x2d\x09\x71\x46\x75\x41\x4a\x91\xca\xfa\xdb\x30\x07\xf1\x61\x5a\x3b\x23\x93\x7e\x1a\xcb\x42\x3b\x8e\x65\x9b\x6e\x1e\x9b\x19\xba\x1d\xf9\x0f\x5e\xcb\x8c\xc1\x16\x5d\xe1\x9c\x21\x1c\xd6\xde\x52\xc3\x64\xa3\x51\xf0\x56\xda\x97\xe2\x48\x38\x9c\x59\x7b\xd9\x1e\xc5\xbd\xd7\x44\x3b\x21\x3e\xe0\xa2\x28\x9d\x55\x69\xb0\x9f\x55\xe8\x68\x1e\x79\xbd\x1f\x20\x06\xb3\x18\xe0\x0e\xb5\xc1\xc2\x10\xb8\x22\x12\x99\x66\x3e\x4e\x83\xde\x64\x80\x1e\x85\x0c\xde\x93\x95\x04\x92\xd6\x13\xf5\x81\x83\x7b\x04\x66\xef\xfa\xac\x07\xdf\xe9\x8b\x6e\x3a\x4d\x9e\xef\x83\x01\x80\x02\x08\x25\x79\x41\x6d\x21\xcd\x3c\x53\x34\x77\x77\x70\x1c\x25\x98\x71\xbb\xd8\x56\x13\xcc\xcf\xa0\x0a\x35\x5a\xf0\x84\x2a\x31\xd6\x99\x82\xb6\x4a\x97\x98\xe6\x39\x45\x82\xda\x30\x60\xe1\xc2\xb4\xd4\xfb\x2f\x6e\x4f\x3c\x5a\x4e\xfb\x9e\xe3\x85\xfb\x6f\x38\x4f\xc8\xcb\x87\xce\x04\xf3\x65\x45\xdd\xe2\xd8\xcf\xed\x3c\xd8\x33\x7e\xc4\x8f\x8a\x3d\x2f\xcc\x03\xb1\x2f\xd2\xc2\xf6\x59\x31\x08\x7b\x0c\xce\xa6\xcc\x5e\xfa\x38\xf0\xbf\x88\xef\xa6\x63\xe8\x5e\x53\x8f\x42\x94\xd4\x0f\xe0\xe2\xba\x49\x71\x17\x6a\x6f\x0f\xee\x11\xf1\xef\x38\xdc\x0e\x0d\x22\x6d\xab\x91\xfa\x95\x2c\xf9\xc1\xc3\xef\x00\xf0\x3f\x67\xcb\xe3\xb3\x22\x92\x5a\x3b\x4e\xef\xad\xd8\x8b\xdb\x5b\x6d\xef\x7f\x86\xb5\xad\x81\xf4\xc6\x6b\x0f\xd8\x35\x9c\x0b\x94\xce\x7b\xe2\xc6\x59\xb5\x7f\xa9\xf5\xfa\x23\x1e\xf8\x3d\x86\x0f\x95\x2e\xab\xf9\xd0\xc9\xfd\x93\x01\x9c\x85\x3a\xb4\x0f\x47\x28\xae\x93\xab\x67\xaf\xce\xbb\x07\xcb\x94\xdc\xc7\xdd\x30\x4d\x85\x3c\x4b\xf7\x88\xaf\x57\x71\x45\xdf\x95\xa3\xf3\x24\xed\xfd\x0d\x06\x23\x50\x9a\xc0\x42\x1e\xde\x87\xba\x61\xd0\xb3\xcc\x3f\x7c\xa4\x9f\x88\xfa\xf1\x0d\x76\xa7\x68\x9a\x0a\x4f\x6f\x65\xa9\x6b\xb2\xee\x5f\x27\x03\x35\x40\x9b\xaf\xc1\xad\xc5\xe2\x7c\x3c\x96\x5a\xc9\xff\x01\x00\x00\xff\xff\xef\x47\x00\x99\xfa\x11\x00\x00")

func grafanaSearchlightDev_dashboardsYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_dashboardsYaml,
		"grafana.searchlight.dev_dashboards.yaml",
	)
}

func grafanaSearchlightDev_dashboardsYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_dashboardsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_dashboards.yaml", size: 4602, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grafanaSearchlightDev_dashboardtemplatesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8f\x23\x35\x10\xbd\xe7\x57\x94\xc4\x61\x2f\x24\xd1\x08\x84\x50\xdf\xd0\x2c\x48\x2b\x40\x42\x3b\xc3\xde\x2b\xed\x4a\xa7\x18\xb7\x6d\xaa\xca\xbd\xcc\x22\xfe\x3b\xb2\xbb\xf3\x35\xdd\x99\x15\x12\x9b\x9b\x5f\x7d\xfa\xbd\x2a\xa7\x31\xf1\x07\x12\xe5\x18\x1a\xc0\xc4\xf4\x97\x51\x28\x27\xdd\x3c\x7d\xaf\x1b\x8e\xdb\xe1\x6e\x47\x86\x77\xab\x27\x0e\xae\x81\xfb\xac\x16\xfb\xf7\xa4\x31\x4b\x4b\x6f\x69\xcf\x81\x8d\x63\x58\xf5\x64\xe8\xd0\xb0\x59\x01\xb4\x42\x58\xc0\x47\xee\x49\x0d\xfb\xd4\x40\xc8\xde\xaf\x00\x3c\xee\xc8\x6b\xf1\x01\xc0\x94\x1a\x50\x42\x69\x0f\x9e\xbb\x83\xad\x00\x02\xf6\xd4\x80\x43\x3d\xec\x22\x8a\x33\xea\x93\x47\x23\xdd\x74\x82\x7b\x0c\xb8\xb9\x70\xdf\x38\x1a\x56\x9a\xa8\x2d\xd9\x3a\x89\x39\x35\x70\xcb\x6d\xcc\x3c\xd5\x6d\xd1\xa8\x8b\xc2\xc7\xf3\xfa\x18\x36\x9d\xae\x5b\x2a\x08\xa6\xa4\x6d\x74\x54\x8f\x23\x0f\x6f\x8f\x3d\x3e\x4e\x3d\x56\x9b\x67\xb5\x9f\x97\xed\xbf\xb0\x8e\xe9\x92\xcf\x82\x7e\xe9\x96\xd5\xac\x1c\xba\xec\x51\x16\x1c\x56\x00\x49\x48\x49\x06\xfa\x3d\x3c\x85\xf8\x31\xfc\xc4\xe4\x9d\x36\xb0\x47\xaf\xc5\xac\x6d\x4c\xd4\xc0\xbd\xcf\x6a\x24\x05\xc8\x3b\x99\xb4\x9a\x6e\xab\x86\x96\xb5\x81\xbf\xff\x59\x01\x0c\xe8\xd9\x55\xa9\x46\x63\x4c\x14\x7e\xf8\xed\xdd\x87\x6f\x1e\xda\x03\xf5\x38\x82\xa5\x6a\x4c\x24\x76\x62\x6c\x54\xef\x34\x37\x27\x0c\xc0\x91\xb6\xc2\xa9\x66\x84\x37\x25\xd5\xe8\x03\xae\x4c\x0a\x29\xd8\x81\x60\x18\x31\x72\xa0\xb5\x0c\xc4\x3d\xd8\x81\x15\x84\xea\xfd\x82\xd5\x96\x2e\xd2\x42\x71\xc1\x00\x71\xf7\x07\xb5\xb6\x81\x87\xc2\x81\x28\xe8\x21\x66\xef\xa0\x8d\x61\x20\x31\x10\x6a\x63\x17\xf8\xd3\x29\xb3\x82\xc5\x5a\xb2\xf2\x6b\x57\x19\x39\x18\x49\x40\x5f\x48\xc8\xf4\x35\x60\x70\xd0\xe3\x33\x08\x95\x1a\x90\xc3\x45\xb6\xea\xa2\x1b\xf8\x35\x0a\x01\x87\x7d\x6c\xe0\x60\x96\xb4\xd9\x6e\x3b\xb6\xe3\xa6\xb4\xb1\xef\x73\x60\x7b\xde\xb6\x31\x98\xf0\x2e\x5b\x14\xdd\x3a\x1a\xc8\x6f\x95\xbb\x75\x99\x2b\x36\x6a\x2d\x0b\x6d\x31\xf1\xba\x36\x1e\xac\xae\x5b\xef\xbe\x3a\x49\xf5\xe6\xa2\x53\x7b\x2e\x92\xaa\x09\x87\xee\x04\xd7\x21\xbc\xc9\x7b\x19\x41\x60\x05\x9c\xc2\xc6\xfe\xcf\xf4\x16\xa8\xb0\xf2\xfe\xc7\x87\x47\x38\x16\xad\x12\x5c\x73\x5e\xd9\x3e\x87\xe9\x99\xf8\x42\x14\x87\x3d\xc9\x28\xdc\x5e\x62\x5f\x33\x52\x70\x29\x72\xb0\x7a\x68\x3d\x53\xb8\x26\x5d\xf3\xae\x67\x2b\x4a\xff\x99\x49\xad\xe8\xb3\x81\x7b\x0c\x21\x1a\xec\x08\x72\x72\x68\xe4\x36\xf0\x2e\xc0\x3d\xf6\xe4\xef\x51\xe9\x8b\xd3\x5e\x18\xd6\x75\xa1\xf4\xf3\xc4\x5f\x3e\x73\xd7\x8e\x23\x5b\x27\xf8\xf8\x32\x1d\x7f\x4b\x3b\x54\x95\x7b\xb9\xe5\xd7\xe6\xdb\x81\x75\x86\xdd\x1c\x03\xd8\x47\xe9\xd1\x9a\x32\xe1\xdf\x7d\xbb\x60\x1f\xfb\x2d\xf3\xdf\xd5\x47\xe2\xfa\x37\x6e\xce\xc2\x6e\xff\x3f\xe9\x0d\xbb\x85\x8b\x00\xb0\x51\xbf\x68\xb8\x21\xc4\x4b\x33\x8a\xe0\xf3\xbc\x1a\xf7\xf4\x29\x86\x19\xa9\x9f\x4d\x6b\x6c\xfe\xbf\x47\xe5\x65\x41\x5e\x8d\x19\xbe\x0c\xd3\x65\xc3\x58\x68\xd6\xcf\x1a\xd8\xcd\xa0\x2b\xcd\x67\xd6\x22\xd9\x1c\x9c\x98\x5d\x30\x98\x9f\xa3\x79\xa1\xea\xb0\x58\x6f\x71\x9b\x46\x36\xbc\x23\x79\x37\xbb\xd1\x6b\x2c\xdd\x66\x28\x0e\x24\x1f\x85\xe7\xfb\x36\x86\xec\x62\xf4\x84\x97\xbd\x2d\x11\xba\x5e\xfc\x93\x3e\x5b\x8f\x2d\x5f\x81\xa7\xca\xaf\x3f\x21\x2f\xa0\xe3\x98\xc0\x70\x87\x3e\x1d\xf0\xee\x8c\xd5\xb5\x59\x4f\x1f\x4f\x17\x66\x80\xfa\xad\xe0\x1a\x30\xc9\x34\xfd\xfb\x47\xc1\x8e\x26\xe4\xdf\x00\x00\x00\xff\xff\x42\xd6\xc4\x16\xfc\x09\x00\x00")

func grafanaSearchlightDev_dashboardtemplatesYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_dashboardtemplatesYaml,
		"grafana.searchlight.dev_dashboardtemplates.yaml",
	)
}

func grafanaSearchlightDev_dashboardtemplatesYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_dashboardtemplatesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_dashboardtemplates.yaml", size: 2556, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _grafanaSearchlightDev_datasourcesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\x24\x35\x0c\xbd\xf7\xaf\xb0\xc4\x61\x2f\xdb\xd5\x1a\x81\x10\xaa\xdb\x6a\x16\xd0\x88\xaf\xd5\xce\xb2\x77\x77\xe2\xae\x0a\x93\x72\x42\xec\xf4\x32\x20\xfe\x3b\x4a\x52\x55\x5d\x3d\xc3\x2c\x27\xfa\x96\x67\xd7\xb3\xf3\x9e\x9d\xc6\xe8\x3e\x52\x12\x17\xb8\x07\x8c\x8e\xfe\x50\xe2\x72\x92\xee\xe1\x1b\xe9\x5c\x38\x9c\x6f\x8e\xa4\x78\xb3\x7b\x70\x6c\x7b\xb8\xcd\xa2\x61\x7a\x4f\x12\x72\x32\xf4\x96\x4e\x8e\x9d\xba\xc0\xbb\x89\x14\x2d\x2a\xf6\x3b\x00\x93\x08\x0b\xf8\xc1\x4d\x24\x8a\x53\xec\x81\xb3\xf7\x3b\x00\x8f\x47\xf2\x52\x72\x00\x30\xc6\x1e\x84\x30\x99\xd1\xbb\x61\xd4\x1d\x00\xe3\x44\x3d\x14\x9a\xc6\x2f\xdd\x90\xf0\x84\x8c\xdd\x26\xaf\xb3\x74\xde\x49\x24\x53\x68\x86\x14\x72\xec\xe1\xa5\xb4\x46\x39\x17\x34\xa8\x34\x84\xe4\x96\xf3\x7e\xf9\x6c\x3e\x5d\xf7\x52\x10\x8c\x51\x4c\xb0\x54\x8f\x4d\x80\xb7\x6b\x73\x15\xf4\x4e\xf4\x87\x27\x81\x1f\x9d\x34\x82\xe8\x73\x42\x7f\x75\xa1\x8a\x8b\xe3\x21\x7b\x4c\xdb\xc8\x0e\x20\x26\x12\x4a\x67\xfa\x95\x1f\x38\x7c\xe2\xef\x1c\x79\x2b\x3d\x9c\xd0\x4b\x09\x8b\x09\x91\x7a\xf8\xb9\x5c\x28\xa2\x21\x5b\xb0\x7c\x4c\xb3\x17\xf3\xa5\x44\x51\xb3\xf4\xf0\xd7\xdf\x3b\x80\x33\x7a\x67\xab\x15\x2d\x18\x22\xf1\x9b\x77\x77\x1f\xbf\xbc\x37\x23\x4d\xd8\xc0\x52\x38\x44\x4a\xba\x0a\xd3\xdc\x59\xe7\x62\xc5\x00\x2c\x89\x49\x2e\x56\x46\x78\x55\xa8\x5a\x0e\xd8\x32\x09\x24\xa0\x23\xc1\xb9\x61\x64\x41\x6a\x19\x08\x27\xd0\xd1\x09\x24\xaa\x57\x64\xad\x2d\x6d\x68\xa1\xa4\x20\x43\x38\xfe\x46\x46\x3b\xb8\x2f\x32\x24\x01\x19\x43\xf6\x16\x4c\xe0\x33\x25\x85\x44\x26\x0c\xec\xfe\x5c\x99\x05\x34\xd4\x92\x1e\x95\x66\xd1\x97\x9f\x63\xa5\xc4\xe8\x8b\x08\x99\x5e\x03\xb2\x85\x09\x1f\x21\x51\xa9\x01\x99\x37\x6c\x35\x45\x3a\xf8\x29\x24\x02\xc7\xa7\xd0\xc3\xa8\x1a\xa5\x3f\x1c\x06\xa7\xcb\x26\x98\x30\x4d\x99\x9d\x3e\x1e\x4c\x60\x4d\xee\x98\x35\x24\x39\x58\x3a\x93\x3f\x88\x1b\xf6\x65\x7c\x9c\x92\xd1\x9c\xe8\x80\xd1\xed\x6b\xe3\xac\x75\x9d\x26\xfb\xc5\x6a\xd5\xab\x4d\xa7\xfa\x58\x5c\x15\x4d\x8e\x87\x15\xae\xb3\xf6\xa2\xee\x65\xe0\xc0\x09\xe0\xfc\x59\xeb\xff\x22\x6f\x81\x8a\x2a\xef\xbf\xbd\xff\x00\x4b\xd1\x6a\xc1\xb5\xe6\x55\xed\xcb\x67\x72\x11\xbe\x08\xe5\xf8\x44\xa9\x19\x77\x4a\x61\xaa\x8c\xc4\x36\x06\xc7\x5a\x0f\xc6\x3b\xe2\x6b\xd1\x25\x1f\x27\xa7\xc5\xe9\xdf\x33\x89\x16\x7f\x3a\xb8\x45\xe6\xa0\x70\x24\xc8\xd1\xa2\x92\xed\xe0\x8e\xe1\x16\x27\xf2\xb7\x28\xf4\xbf\xcb\x5e\x14\x96\x7d\x91\xf4\xbf\x85\xdf\x3e\x63\xd7\x89\x4d\xad\x15\x5e\x1e\xa0\xcf\x27\xb5\x65\xdc\xa4\xfd\xdb\xaa\x35\x2f\xea\xea\xdb\xef\x89\x29\x6d\x36\xf6\x85\x11\xf8\xe5\x59\x7a\x99\x87\x62\xca\x14\xa4\x2e\x0a\xb1\xc2\x70\x89\x2e\xfc\x4f\x48\x01\x4e\x21\x2d\xcb\xd9\xe6\xa4\x83\x3b\x05\x13\x52\x22\x89\x81\xed\xba\x62\x4b\xfc\x95\x6c\x78\x5f\xc3\xa7\xd1\x99\xf1\x19\xab\x93\xc5\x6b\x08\x0c\x53\x6e\x1b\x0f\xc7\xc7\x4a\xf5\xe6\xdd\xdd\x3c\x69\xdd\xee\x59\x37\x13\x6a\x5f\x96\xf7\xeb\xaf\x9e\xc4\x9a\xc2\x65\xad\x07\x4a\x9f\x57\xfe\x09\x74\x5e\xfe\xe0\xce\x37\xe8\xe3\x88\x37\x17\xac\xda\xb0\x9f\xff\x78\x36\x61\x80\xa6\x57\x0f\x9a\x32\xcd\x2f\x6b\x48\x38\xd0\x8c\xfc\x13\x00\x00\xff\xff\x9a\x69\x6e\xa4\x38\x07\x00\x00")

func grafanaSearchlightDev_datasourcesYamlBytes() ([]byte, error) {
	return bindataRead(
		_grafanaSearchlightDev_datasourcesYaml,
		"grafana.searchlight.dev_datasources.yaml",
	)
}

func grafanaSearchlightDev_datasourcesYaml() (*asset, error) {
	bytes, err := grafanaSearchlightDev_datasourcesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "grafana.searchlight.dev_datasources.yaml", size: 1848, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"grafana.searchlight.dev_dashboards.yaml":         grafanaSearchlightDev_dashboardsYaml,
	"grafana.searchlight.dev_dashboardtemplates.yaml": grafanaSearchlightDev_dashboardtemplatesYaml,
	"grafana.searchlight.dev_datasources.yaml":        grafanaSearchlightDev_datasourcesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"grafana.searchlight.dev_dashboards.yaml":         {grafanaSearchlightDev_dashboardsYaml, map[string]*bintree{}},
	"grafana.searchlight.dev_dashboardtemplates.yaml": {grafanaSearchlightDev_dashboardtemplatesYaml, map[string]*bintree{}},
	"grafana.searchlight.dev_datasources.yaml":        {grafanaSearchlightDev_datasourcesYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
